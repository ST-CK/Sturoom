-- 이미 user_role 타입이 있다면, 아래 줄은 실행하지 마세요
-- create type public.user_role as enum ('parent', 'student', 'teacher');

-- 1) profiles 테이블 새로 생성
drop table if exists public.profiles cascade;

create table public.profiles (
  id          uuid primary key references auth.users(id) on delete cascade,
  role        public.user_role not null,
  school_name text not null default '',
  grade       text,
  full_name   text not null,
  email       text,
  phone       text,
  created_at  timestamptz not null default now(),
  updated_at  timestamptz not null default now()
);

-- updated_at 자동 갱신
create or replace function public.set_updated_at()
returns trigger
language plpgsql
as $$
begin
  new.updated_at := now();
  return new;
end;
$$;

create trigger trg_profiles_updated_at
before update on public.profiles
for each row execute procedure public.set_updated_at();

-- 유저 생성 시 profiles 자동 생성
create or replace function public.handle_new_user()
returns trigger
language plpgsql
security definer
set search_path = public
as $$
declare
  v_role public.user_role;
begin
  begin
    v_role := (new.raw_user_meta_data->>'role')::public.user_role;
  exception when others then
    v_role := 'student'::public.user_role;
  end;

  insert into public.profiles (id, role, school_name, grade, full_name, email, phone)
  values (
    new.id,
    coalesce(v_role, 'student'::public.user_role),
    coalesce(new.raw_user_meta_data->>'school_name', ''),
    nullif(new.raw_user_meta_data->>'grade',''),
    coalesce(new.raw_user_meta_data->>'full_name',''),
    new.email,
    nullif(new.raw_user_meta_data->>'phone','')
  )
  on conflict (id) do nothing;

  return new;
end;
$$;

drop trigger if exists on_auth_user_created on auth.users;
create trigger on_auth_user_created
after insert on auth.users
for each row execute procedure public.handle_new_user();

-- RLS 정책
alter table public.profiles enable row level security;

create policy profiles_select_own
on public.profiles for select
to authenticated
using (auth.uid() = id);

create policy profiles_insert_own
on public.profiles for insert
to authenticated
with check (auth.uid() = id);

create policy profiles_update_own
on public.profiles for update
to authenticated
using (auth.uid() = id)
with check (auth.uid() = id);



-- 게시글
create table public.board_posts (
  id uuid primary key default gen_random_uuid(),
  title text not null,
  content text not null,
  author_email text not null,
  author_name text not null,
  is_anonymous boolean not null default false,
  is_pinned boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz
);

-- updated_at 자동 갱신
create or replace function public.trg_board_posts_updated_at()
returns trigger language plpgsql as $$
begin
  new.updated_at = now();
  return new;
end $$;

create trigger board_posts_set_updated_at
before update on public.board_posts
for each row execute function public.trg_board_posts_updated_at();

-- 댓글
create table public.board_comments (
  id uuid primary key default gen_random_uuid(),
  post_id uuid not null references public.board_posts(id) on delete cascade,
  author text not null,
  content text not null,
  created_at timestamptz not null default now()
);

-- 좋아요
create table public.board_likes (
  id uuid primary key default gen_random_uuid(),
  post_id uuid not null references public.board_posts(id) on delete cascade,
  user_id text not null,
  created_at timestamptz not null default now(),
  unique (post_id, user_id)
);

-- 첨부파일
create table public.board_attachments (
  id uuid primary key default gen_random_uuid(),
  post_id uuid not null references public.board_posts(id) on delete cascade,
  file_name text not null,
  storage_path text not null,
  created_at timestamptz not null default now()
);

-- 뷰
create or replace view public.board_posts_view as
select p.* from public.board_posts p;









시간표

create extension if not exists pgcrypto;

create table if not exists public.timetables (
  id uuid primary key default gen_random_uuid(),
  user_id uuid not null references auth.users(id) on delete cascade,
  name text not null default '내 시간표',
  stage text not null check (stage in ('elementary','middle','high','university')),
  academic_year int,
  term text,
  start_date date,
  end_date date,
  is_default boolean not null default true,
  created_at timestamptz default now()
);

create unique index if not exists timetables_user_default_idx
  on public.timetables(user_id) where is_default;
create index if not exists timetables_user_idx on public.timetables(user_id);

create table if not exists public.timetable_entries (
  id uuid primary key default gen_random_uuid(),
  timetable_id uuid not null references public.timetables(id) on delete cascade,
  title text not null,
  location text,
  instructor text,
  color text,
  day_of_week smallint not null check (day_of_week between 1 and 7),
  start_time time not null,
  end_time time not null,
  period_from smallint,
  period_to smallint,
  memo text,
  created_at timestamptz default now(),
  check (end_time > start_time),
  check (period_from is null or period_to is null or period_from <= period_to)
);

create index if not exists timetable_entries_tid_idx on public.timetable_entries(timetable_id);
create index if not exists timetable_entries_tid_dow_idx on public.timetable_entries(timetable_id, day_of_week);
create index if not exists timetable_entries_time_idx on public.timetable_entries(day_of_week, start_time);

alter table public.timetables enable row level security;
alter table public.timetable_entries enable row level security;

drop policy if exists timetables_select_own on public.timetables;
drop policy if exists timetables_write_own on public.timetables;
drop policy if exists entries_select_own on public.timetable_entries;
drop policy if exists entries_write_own on public.timetable_entries;

create policy timetables_select_own
  on public.timetables
  for select
  using (user_id = auth.uid());

create policy timetables_write_own
  on public.timetables
  for all
  using (user_id = auth.uid())
  with check (user_id = auth.uid());

create policy entries_select_own
  on public.timetable_entries
  for select
  using (exists (select 1 from public.timetables t where t.id = timetable_id and t.user_id = auth.uid()));

create policy entries_write_own
  on public.timetable_entries
  for all
  using (exists (select 1 from public.timetables t where t.id = timetable_id and t.user_id = auth.uid()))
  with check (exists (select 1 from public.timetables t where t.id = timetable_id and t.user_id = auth.uid()));













회원가입

-- 0) (선택) enum 대신 text로 저장해도 됨
create type user_role as enum ('parent', 'student', 'teacher');

-- 1) profiles 테이블
create table public.profiles (
  id uuid primary key references auth.users on delete cascade,
  role user_role not null,
  school_name text not null,
  grade text,                -- 초/중/고/대 모두 커버하려고 text로 두기
  full_name text not null,
  email text,
  phone text,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

-- 2) 변경 시각 자동 업데이트
create or replace function public.set_updated_at()
returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

create trigger trg_profiles_updated_at
before update on public.profiles
for each row execute procedure public.set_updated_at();

-- 3) RLS (본인만 읽기/쓰기)
alter table public.profiles enable row level security;

create policy "profiles_select_own"
on public.profiles for select
to authenticated
using (auth.uid() = id);

create policy "profiles_insert_own"
on public.profiles for insert
to authenticated
with check (auth.uid() = id);

create policy "profiles_update_own"
on public.profiles for update
to authenticated
using (auth.uid() = id)
with check (auth.uid() = id);








library
-- ========================
-- 1. 강의실 테이블
-- ========================
create table library_rooms (
  id uuid primary key default gen_random_uuid(),
  title text not null,
  instructor text not null,
  track text,
  thumbnail text,
  is_new boolean default true,
  created_at timestamp with time zone default now()
);

-- ========================
-- 2. 강의실 게시물 테이블
-- ========================
create table library_posts (
  id uuid primary key default gen_random_uuid(),
  room_id uuid not null references library_rooms(id) on delete cascade,
  title text not null,
  body text,
  summary text,
  week int not null,
  status text,
  tags text[],
  due_at timestamp with time zone,
  attachments jsonb,
  images text[],
  created_at timestamp with time zone default now()
);

-- ========================
-- 3. 댓글 테이블
-- ========================
create table comments (
  id uuid primary key default gen_random_uuid(),
  post_id uuid not null references library_posts(id) on delete cascade,
  content text not null,
  created_at timestamp with time zone default now()
);